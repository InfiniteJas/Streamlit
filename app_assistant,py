import streamlit as st
import requests
import json
import boto3
from botocore.exceptions import ClientError
import pandas as pd
from datetime import datetime
import plotly.express as px
import plotly.graph_objects as go
from collections import Counter

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
API_ENDPOINT = "url"
S3_BUCKET = "AWS bucket name"
S3_PREFIX = "prefix S3 bucket"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ boto3
s3 = boto3.client('s3')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ —á–∞—Ç-–±–æ—Ç—É
def send_chat_request(user_id, query):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API —á–∞—Ç-–±–æ—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç.
    
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param query: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: –û—Ç–≤–µ—Ç –æ—Ç API –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    payload = {
        "user_id": user_id,
        "query": query
    }
    response = requests.post(API_ENDPOINT, json=payload)
    return response.json() if response.status_code == 200 else None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ S3
def get_users_from_s3():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∫–µ—Ç–∞ S3.
    
    :return: –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    users = set()
    try:
        response = s3.list_objects_v2(Bucket=S3_BUCKET, Prefix=S3_PREFIX, Delimiter='/')
        for prefix in response.get('CommonPrefixes', []):
            user = prefix.get('Prefix').split('/')[-2]
            if user != 'errors':
                users.add(user)
    except ClientError as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    return list(users)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ S3
def get_user_data_from_s3(user_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∫–µ—Ç–∞ S3.
    
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    data = []
    try:
        response = s3.list_objects_v2(Bucket=S3_BUCKET, Prefix=f"{S3_PREFIX}{user_id}/")
        for obj in response.get('Contents', []):
            file_content = s3.get_object(Bucket=S3_BUCKET, Key=obj['Key'])['Body'].read().decode('utf-8')
            data.append(json.loads(file_content))
    except ClientError as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    return data

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—à–∏–±–∫–∞—Ö –∏–∑ S3
def get_error_data_from_s3():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–± –æ—à–∏–±–∫–∞—Ö –∏–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏ –≤ –±–∞–∫–µ—Ç–µ S3.
    
    :return: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± –æ—à–∏–±–∫–∞—Ö
    """
    data = []
    try:
        response = s3.list_objects_v2(Bucket=S3_BUCKET, Prefix=f"{S3_PREFIX}errors/")
        for obj in response.get('Contents', []):
            file_content = s3.get_object(Bucket=S3_BUCKET, Key=obj['Key'])['Body'].read().decode('utf-8')
            data.append(json.loads(file_content))
    except ClientError as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—à–∏–±–∫–∞—Ö: {e}")
    return data

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def get_all_users_data():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏—Ö –≤ –æ–¥–∏–Ω DataFrame.
    
    :return: pandas DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    all_data = []
    users = get_users_from_s3()
    for user in users:
        user_data = get_user_data_from_s3(user)
        for item in user_data:
            item['user_id'] = user  # –î–æ–±–∞–≤–ª—è–µ–º user_id –∫ –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
        all_data.extend(user_data)
    return pd.DataFrame(all_data)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(page_title="HCB Assistant", page_icon="üè¶", layout="wide")

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π CSS –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
st.markdown("""
<style>
    .main {
        background-color: #f0f2f6;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .stTextInput, .stTextArea {
        background-color: white;
        border-radius: 5px;
        padding: 10px;
        border: 1px solid #ddd;
    }
    .stButton>button {
        background-color: #0066cc;
        color: white;
        border-radius: 5px;
        padding: 10px 20px;
        font-weight: bold;
    }
    .response-box {
        background-color: white;
        border-radius: 5px;
        padding: 15px;
        border: 1px solid #ddd;
        margin-top: 20px;
    }
    h1 {
        color: #0066cc;
    }
</style>
""", unsafe_allow_html=True)

# –°–∞–π–¥–±–∞—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
mode = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º", ["–ß–∞—Ç", "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"])

if mode == "–ß–∞—Ç":
    st.title("Assistant")

    # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    col1, col2 = st.columns([1, 2])

    with col1:
        user_id = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    
    with col2:
        query = st.text_area("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if st.button("–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç"):
        if user_id and query:
            with st.spinner('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...'):
                result = send_chat_request(user_id, query)
                if result:
                    st.markdown("<div class='response-box'>", unsafe_allow_html=True)
                    st.markdown(f"**–û—Ç–≤–µ—Ç:**\n\n{result['response']}")
                    st.markdown(f"**–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** {result['processing_time']:.2f} —Å–µ–∫—É–Ω–¥")
                    st.markdown("</div>", unsafe_allow_html=True)
                else:
                    st.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        else:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–ø—Ä–æ—Å.")

elif mode == "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å":
    st.title("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å Assistant")

    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    analysis_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞", ["–û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–û—à–∏–±–∫–∏"])

    if analysis_type == "–û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞":
        st.subheader("–û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
            df_all = get_all_users_data()
            df_all['timestamp'] = pd.to_datetime(df_all['timestamp'], unit='s')

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        st.subheader("–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        col1, col2, col3 = st.columns(3)
        col1.metric("–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", df_all['user_id'].nunique())
        col2.metric("–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤", len(df_all))
        col3.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", f"{df_all['processing_time'].mean():.2f} —Å–µ–∫")

        # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–Ω—è–º
        st.subheader("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–Ω—è–º")
        daily_activity = df_all.groupby(df_all['timestamp'].dt.date).size().reset_index(name='count')
        fig_daily = px.line(daily_activity, x='timestamp', y='count', title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –¥–Ω—è–º')
        st.plotly_chart(fig_daily)

        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤
        st.subheader("–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤")
        top_users = df_all['user_id'].value_counts().head(10)
        fig_top_users = px.bar(top_users, x=top_users.index, y=top_users.values, title='–¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
        st.plotly_chart(fig_top_users)

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤")
        fig_proc_time = px.histogram(df_all, x='processing_time', nbins=50, title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏')
        st.plotly_chart(fig_proc_time)

        # –ê–Ω–∞–ª–∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–ª–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö
        st.subheader("–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö")
        all_words = ' '.join(df_all['query']).lower().split()
        word_freq = Counter(all_words)
        common_words = pd.DataFrame(word_freq.most_common(20), columns=['–°–ª–æ–≤–æ', '–ß–∞—Å—Ç–æ—Ç–∞'])
        fig_words = px.bar(common_words, x='–°–ª–æ–≤–æ', y='–ß–∞—Å—Ç–æ—Ç–∞', title='–¢–æ–ø-20 —Å–ª–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö')
        st.plotly_chart(fig_words)

    elif analysis_type == "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users = get_users_from_s3()
        selected_user = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", users)

        if selected_user:
            user_data = get_user_data_from_s3(selected_user)
            if user_data:
                df = pd.DataFrame(user_data)
                df['timestamp'] = pd.to_datetime(df['timestamp'], unit='s')
                
                st.subheader(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {selected_user}")
                st.dataframe(df.style.highlight_max(axis=0))

                col1, col2 = st.columns(2)
                with col1:
                    st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                    st.info(f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(df)}")
                    st.info(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {df['processing_time'].mean():.2f} —Å–µ–∫—É–Ω–¥")
                
                with col2:
                    st.subheader("–ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                    st.line_chart(df.set_index('timestamp')['processing_time'])

    else:  # –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—à–∏–±–æ–∫
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—à–∏–±–∫–∞—Ö
        error_data = get_error_data_from_s3()
        if error_data:
            df_errors = pd.DataFrame(error_data)
            df_errors['timestamp'] = pd.to_datetime(df_errors['timestamp'], unit='s')
            
            st.subheader("–î–∞–Ω–Ω—ã–µ –æ–± –æ—à–∏–±–∫–∞—Ö")
            st.dataframe(df_errors.style.highlight_max(axis=0))

            col1, col2 = st.columns(2)
            with col1:
                st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫")
                st.info(f"–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {len(df_errors)}")
            
            with col2:
                error_counts = df_errors['error'].value_counts()
                st.subheader("–ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏")
                st.bar_chart(error_counts.head())

# –§—É—Ç–µ—Ä
st.sidebar.markdown("---")
st.sidebar.info("¬© 2024 Assistant")
